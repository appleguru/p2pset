	Our project was to implement a multiplayer Set game using a peer-to-peer architecture.  This meant that we could not have a single peer acting as the server, and all peers had to be running symmetrical code.  We set several design criteria to follow in developing the program.  First, the game would use a graphical interface, where players see an array of buttons, each representing a card in the Set deck, which they can click on to select.  Second, the game would need to allow players to detect each other automatically without the facilitation of a server, so that when a new peer joins the network, it can detect games in progress and give the player the choice of joining one of these or starting a new game.  Third, the game data such as scores and lists of undealt cards would be stored independently by each peer, but changes to this data could only be made by acquiring a critical section lock.  Once changes were made, the data would be synchronized between all peers.  Finally, the code would be fault-tolerant, in that it could adapt seamlessly to any number of peers disconnecting from the network at any time during code execution.
	Peer-to-peer Set requires the use of many distributed computing techniques.  We use Transmission Control Protocol to ensure delivery of messages sent between peers.  The token algorithm is implemented to ensure that the game data is never edited or distributed by more than one peer at a time.
