Algorithms and Protocols *Incomplete*

	Game creation and joining:  When a set client first starts up, the user is given an option of creating a new game, or querying a list of existing games.  If they choose to query a list of exiting games, then a mulitcast meesage goes out with the "Looking for games" message, and the client's return address and port.  Any client in a game, whether that game has started or not*, upon recieving this multicast (probably on a special multicast listener), will respond with a "here is a game" message, which contains the game's data and their own address, to facilitate joining.  The client reads these responses, and if it contains a game it doesn't already know about, will add that game to a list of possible games to join.
	If the client decides to join a game, it will send out a 'join game' message to the client that told it about the game.  That client will ask for the critical section, and then update the game state to include the new player by passing a 'new player' message to all the other clients, and then pass a 'synchronize to me'  message to the new client, with the complete game state.  
	The critical section will be enusred by token passing.  Any client that wants to enter the critical section must wait until it has the token, which will be passed in a cycle.  

* We may later decide that new players can only join unstarted games, or introduce some kind of mechanism to support private games, or an optional 'maximum players' attribute to games.  For now, all games may be joined by anyone who knows about them.  

Message Types:

Looking for games
Here is a game
new player
Synchronize to me
I claim set
Pass token