Algorithms and Protocols

	When a set client first starts up, the user is given an option of creating a new game, or querying a list of existing games.  If they choose to query a list of exiting games, then a multicast message goes out with the "Looking for games" message, and the client's return address and port.  Any client in a game, whether that game has started or not*, upon receiving this multicast (probably on a special multicast listener), will respond with a "here is a game" message, which contains the game's data and their own address, to facilitate joining.  The client reads these responses, and if it contains a game it doesn't already know about, will add that game to a list of possible games to join.
	If the client decides to join a game, it will send out a 'join game' message to the client that told it about the game.  That client will ask for the critical section, and then update the game state to include the new player by passing a 'new player' message to all the other clients, and then pass a 'synchronize to me'  message to the new client, with the complete game state.  
	The critical section will be ensured by a token passing algorithm.  Any client that wants to enter the critical section must wait until it has the token, which will be passed in a cycle. Upon exiting the critical section, it must pass the token immediately, to improve fairness. Since there is only one token, only one client may enter the critical section at a time 
	In addition to adding new players, the critical section will surround any set claim.  When a player chooses a set locally, the program acquires the critical section, then rechecks the set, to ensure that the cards in it weren't removed in the intervening period, then sends an "I claim set" message to the other players with the cards to remove, and what to replace them with.  Upon receiving this message, the other players make the changes to the board cards, and increment the sender's score.  Once the final set has been removed, the game is over and the winner is declared.  
	When it quits normally, a client will acquire the critical section and send an "I quit" message to the other players, which will remove it from their list of players in the game.  Occasionally, a client might exit the game abnormally.  When that happens, the rest of the players must realize this and remove that player.  Essentially, whenever a client gets a TCP error trying to send to another client, it assumes the receiver is dead and gets rid of them.  There is normally no need to alert the other players, as they will realize it in time.  The only time the sender will need to take another action is if it fails passing the token.  In that case, it must pass to the next receiver in the cycle.  

* We may later decide that new players can only join unstarted games, or introduce some kind of mechanism to support private games, or an optional 'maximum players' attribute to games.  For now, all games may be joined by anyone who knows about them.  

Message Types:

Looking for games
Here is a game
new player
Synchronize to me
I claim set
Pass token